// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"
	time "time"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3public "github.com/rancher/types/apis/management.cattle.io/v3public"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockAuthTokenListerMockGet  sync.RWMutex
	lockAuthTokenListerMockList sync.RWMutex
)

// Ensure, that AuthTokenListerMock does implement AuthTokenLister.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthTokenLister = &AuthTokenListerMock{}

// AuthTokenListerMock is a mock implementation of AuthTokenLister.
//
//     func TestSomethingThatUsesAuthTokenLister(t *testing.T) {
//
//         // make and configure a mocked AuthTokenLister
//         mockedAuthTokenLister := &AuthTokenListerMock{
//             GetFunc: func(namespace string, name string) (*v3public.AuthToken, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3public.AuthToken, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedAuthTokenLister in code that requires AuthTokenLister
//         // and then make assertions.
//
//     }
type AuthTokenListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3public.AuthToken, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3public.AuthToken, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *AuthTokenListerMock) Get(namespace string, name string) (*v3public.AuthToken, error) {
	if mock.GetFunc == nil {
		panic("AuthTokenListerMock.GetFunc: method is nil but AuthTokenLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthTokenListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthTokenListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAuthTokenLister.GetCalls())
func (mock *AuthTokenListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthTokenListerMockGet.RLock()
	calls = mock.calls.Get
	lockAuthTokenListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthTokenListerMock) List(namespace string, selector labels.Selector) ([]*v3public.AuthToken, error) {
	if mock.ListFunc == nil {
		panic("AuthTokenListerMock.ListFunc: method is nil but AuthTokenLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockAuthTokenListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthTokenListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedAuthTokenLister.ListCalls())
func (mock *AuthTokenListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockAuthTokenListerMockList.RLock()
	calls = mock.calls.List
	lockAuthTokenListerMockList.RUnlock()
	return calls
}

var (
	lockAuthTokenControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockAuthTokenControllerMockAddClusterScopedHandler        sync.RWMutex
	lockAuthTokenControllerMockAddFeatureHandler              sync.RWMutex
	lockAuthTokenControllerMockAddHandler                     sync.RWMutex
	lockAuthTokenControllerMockEnqueue                        sync.RWMutex
	lockAuthTokenControllerMockEnqueueAfter                   sync.RWMutex
	lockAuthTokenControllerMockGeneric                        sync.RWMutex
	lockAuthTokenControllerMockInformer                       sync.RWMutex
	lockAuthTokenControllerMockLister                         sync.RWMutex
	lockAuthTokenControllerMockStart                          sync.RWMutex
	lockAuthTokenControllerMockSync                           sync.RWMutex
)

// Ensure, that AuthTokenControllerMock does implement AuthTokenController.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthTokenController = &AuthTokenControllerMock{}

// AuthTokenControllerMock is a mock implementation of AuthTokenController.
//
//     func TestSomethingThatUsesAuthTokenController(t *testing.T) {
//
//         // make and configure a mocked AuthTokenController
//         mockedAuthTokenController := &AuthTokenControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
// 	               panic("mock out the EnqueueAfter method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3public.AuthTokenLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedAuthTokenController in code that requires AuthTokenController
//         // and then make assertions.
//
//     }
type AuthTokenControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3public.AuthTokenHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3public.AuthTokenHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3public.AuthTokenHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3public.AuthTokenLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3public.AuthTokenHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3public.AuthTokenHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthTokenHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3public.AuthTokenHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *AuthTokenControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3public.AuthTokenHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("AuthTokenControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but AuthTokenController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3public.AuthTokenHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockAuthTokenControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockAuthTokenControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedAuthTokenController.AddClusterScopedFeatureHandlerCalls())
func (mock *AuthTokenControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockAuthTokenControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthTokenControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3public.AuthTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthTokenControllerMock.AddClusterScopedHandlerFunc: method is nil but AuthTokenController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3public.AuthTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockAuthTokenControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthTokenControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedAuthTokenController.AddClusterScopedHandlerCalls())
func (mock *AuthTokenControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthTokenControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthTokenControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthTokenControllerMock.AddFeatureHandlerFunc: method is nil but AuthTokenController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3public.AuthTokenHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockAuthTokenControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthTokenControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedAuthTokenController.AddFeatureHandlerCalls())
func (mock *AuthTokenControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthTokenControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthTokenControllerMock) AddHandler(ctx context.Context, name string, handler v3public.AuthTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthTokenControllerMock.AddHandlerFunc: method is nil but AuthTokenController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3public.AuthTokenHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockAuthTokenControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthTokenControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedAuthTokenController.AddHandlerCalls())
func (mock *AuthTokenControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthTokenControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *AuthTokenControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("AuthTokenControllerMock.EnqueueFunc: method is nil but AuthTokenController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockAuthTokenControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockAuthTokenControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedAuthTokenController.EnqueueCalls())
func (mock *AuthTokenControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockAuthTokenControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockAuthTokenControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *AuthTokenControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("AuthTokenControllerMock.EnqueueAfterFunc: method is nil but AuthTokenController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockAuthTokenControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockAuthTokenControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//     len(mockedAuthTokenController.EnqueueAfterCalls())
func (mock *AuthTokenControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockAuthTokenControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockAuthTokenControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *AuthTokenControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("AuthTokenControllerMock.GenericFunc: method is nil but AuthTokenController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockAuthTokenControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockAuthTokenControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedAuthTokenController.GenericCalls())
func (mock *AuthTokenControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthTokenControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockAuthTokenControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *AuthTokenControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("AuthTokenControllerMock.InformerFunc: method is nil but AuthTokenController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockAuthTokenControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockAuthTokenControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedAuthTokenController.InformerCalls())
func (mock *AuthTokenControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthTokenControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockAuthTokenControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *AuthTokenControllerMock) Lister() v3public.AuthTokenLister {
	if mock.ListerFunc == nil {
		panic("AuthTokenControllerMock.ListerFunc: method is nil but AuthTokenController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockAuthTokenControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockAuthTokenControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedAuthTokenController.ListerCalls())
func (mock *AuthTokenControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthTokenControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockAuthTokenControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *AuthTokenControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("AuthTokenControllerMock.StartFunc: method is nil but AuthTokenController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockAuthTokenControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockAuthTokenControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedAuthTokenController.StartCalls())
func (mock *AuthTokenControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockAuthTokenControllerMockStart.RLock()
	calls = mock.calls.Start
	lockAuthTokenControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *AuthTokenControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("AuthTokenControllerMock.SyncFunc: method is nil but AuthTokenController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockAuthTokenControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockAuthTokenControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedAuthTokenController.SyncCalls())
func (mock *AuthTokenControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockAuthTokenControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockAuthTokenControllerMockSync.RUnlock()
	return calls
}

var (
	lockAuthTokenInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockAuthTokenInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockAuthTokenInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockAuthTokenInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockAuthTokenInterfaceMockAddFeatureHandler                sync.RWMutex
	lockAuthTokenInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockAuthTokenInterfaceMockAddHandler                       sync.RWMutex
	lockAuthTokenInterfaceMockAddLifecycle                     sync.RWMutex
	lockAuthTokenInterfaceMockController                       sync.RWMutex
	lockAuthTokenInterfaceMockCreate                           sync.RWMutex
	lockAuthTokenInterfaceMockDelete                           sync.RWMutex
	lockAuthTokenInterfaceMockDeleteCollection                 sync.RWMutex
	lockAuthTokenInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockAuthTokenInterfaceMockGet                              sync.RWMutex
	lockAuthTokenInterfaceMockGetNamespaced                    sync.RWMutex
	lockAuthTokenInterfaceMockList                             sync.RWMutex
	lockAuthTokenInterfaceMockListNamespaced                   sync.RWMutex
	lockAuthTokenInterfaceMockObjectClient                     sync.RWMutex
	lockAuthTokenInterfaceMockUpdate                           sync.RWMutex
	lockAuthTokenInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that AuthTokenInterfaceMock does implement AuthTokenInterface.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthTokenInterface = &AuthTokenInterfaceMock{}

// AuthTokenInterfaceMock is a mock implementation of AuthTokenInterface.
//
//     func TestSomethingThatUsesAuthTokenInterface(t *testing.T) {
//
//         // make and configure a mocked AuthTokenInterface
//         mockedAuthTokenInterface := &AuthTokenInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3public.AuthTokenLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3public.AuthTokenHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3public.AuthTokenLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3public.AuthTokenController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3public.AuthToken) (*v3public.AuthToken, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3public.AuthToken, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3public.AuthToken, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3public.AuthTokenList, error) {
// 	               panic("mock out the List method")
//             },
//             ListNamespacedFunc: func(namespace string, opts v1.ListOptions) (*v3public.AuthTokenList, error) {
// 	               panic("mock out the ListNamespaced method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3public.AuthToken) (*v3public.AuthToken, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedAuthTokenInterface in code that requires AuthTokenInterface
//         // and then make assertions.
//
//     }
type AuthTokenInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3public.AuthTokenHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3public.AuthTokenHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3public.AuthTokenLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3public.AuthTokenHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3public.AuthTokenLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3public.AuthTokenController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3public.AuthToken) (*v3public.AuthToken, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3public.AuthToken, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3public.AuthToken, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3public.AuthTokenList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts v1.ListOptions) (*v3public.AuthTokenList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3public.AuthToken) (*v3public.AuthToken, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3public.AuthTokenHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthTokenLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3public.AuthTokenHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthTokenLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthTokenHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthTokenLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3public.AuthTokenHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3public.AuthTokenLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3public.AuthToken
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3public.AuthToken
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *AuthTokenInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3public.AuthTokenHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("AuthTokenInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but AuthTokenInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3public.AuthTokenHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockAuthTokenInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockAuthTokenInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedAuthTokenInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *AuthTokenInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockAuthTokenInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *AuthTokenInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("AuthTokenInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but AuthTokenInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthTokenLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockAuthTokenInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockAuthTokenInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedAuthTokenInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *AuthTokenInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3public.AuthTokenLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthTokenLifecycle
	}
	lockAuthTokenInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockAuthTokenInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *AuthTokenInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3public.AuthTokenHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("AuthTokenInterfaceMock.AddClusterScopedHandlerFunc: method is nil but AuthTokenInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3public.AuthTokenHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockAuthTokenInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockAuthTokenInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedAuthTokenInterface.AddClusterScopedHandlerCalls())
func (mock *AuthTokenInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockAuthTokenInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *AuthTokenInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3public.AuthTokenLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("AuthTokenInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but AuthTokenInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthTokenLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockAuthTokenInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockAuthTokenInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedAuthTokenInterface.AddClusterScopedLifecycleCalls())
func (mock *AuthTokenInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3public.AuthTokenLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3public.AuthTokenLifecycle
	}
	lockAuthTokenInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockAuthTokenInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *AuthTokenInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3public.AuthTokenHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("AuthTokenInterfaceMock.AddFeatureHandlerFunc: method is nil but AuthTokenInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3public.AuthTokenHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockAuthTokenInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockAuthTokenInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedAuthTokenInterface.AddFeatureHandlerCalls())
func (mock *AuthTokenInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockAuthTokenInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *AuthTokenInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3public.AuthTokenLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("AuthTokenInterfaceMock.AddFeatureLifecycleFunc: method is nil but AuthTokenInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3public.AuthTokenLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthTokenInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockAuthTokenInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedAuthTokenInterface.AddFeatureLifecycleCalls())
func (mock *AuthTokenInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3public.AuthTokenLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3public.AuthTokenLifecycle
	}
	lockAuthTokenInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockAuthTokenInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *AuthTokenInterfaceMock) AddHandler(ctx context.Context, name string, sync v3public.AuthTokenHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("AuthTokenInterfaceMock.AddHandlerFunc: method is nil but AuthTokenInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3public.AuthTokenHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockAuthTokenInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockAuthTokenInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedAuthTokenInterface.AddHandlerCalls())
func (mock *AuthTokenInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3public.AuthTokenHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3public.AuthTokenHandlerFunc
	}
	lockAuthTokenInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockAuthTokenInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *AuthTokenInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3public.AuthTokenLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("AuthTokenInterfaceMock.AddLifecycleFunc: method is nil but AuthTokenInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthTokenLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockAuthTokenInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockAuthTokenInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedAuthTokenInterface.AddLifecycleCalls())
func (mock *AuthTokenInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3public.AuthTokenLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3public.AuthTokenLifecycle
	}
	lockAuthTokenInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockAuthTokenInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *AuthTokenInterfaceMock) Controller() v3public.AuthTokenController {
	if mock.ControllerFunc == nil {
		panic("AuthTokenInterfaceMock.ControllerFunc: method is nil but AuthTokenInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockAuthTokenInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockAuthTokenInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedAuthTokenInterface.ControllerCalls())
func (mock *AuthTokenInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthTokenInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockAuthTokenInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *AuthTokenInterfaceMock) Create(in1 *v3public.AuthToken) (*v3public.AuthToken, error) {
	if mock.CreateFunc == nil {
		panic("AuthTokenInterfaceMock.CreateFunc: method is nil but AuthTokenInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3public.AuthToken
	}{
		In1: in1,
	}
	lockAuthTokenInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockAuthTokenInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedAuthTokenInterface.CreateCalls())
func (mock *AuthTokenInterfaceMock) CreateCalls() []struct {
	In1 *v3public.AuthToken
} {
	var calls []struct {
		In1 *v3public.AuthToken
	}
	lockAuthTokenInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockAuthTokenInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *AuthTokenInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("AuthTokenInterfaceMock.DeleteFunc: method is nil but AuthTokenInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockAuthTokenInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockAuthTokenInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedAuthTokenInterface.DeleteCalls())
func (mock *AuthTokenInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockAuthTokenInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockAuthTokenInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *AuthTokenInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("AuthTokenInterfaceMock.DeleteCollectionFunc: method is nil but AuthTokenInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockAuthTokenInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockAuthTokenInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedAuthTokenInterface.DeleteCollectionCalls())
func (mock *AuthTokenInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockAuthTokenInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockAuthTokenInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *AuthTokenInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("AuthTokenInterfaceMock.DeleteNamespacedFunc: method is nil but AuthTokenInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockAuthTokenInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockAuthTokenInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedAuthTokenInterface.DeleteNamespacedCalls())
func (mock *AuthTokenInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockAuthTokenInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockAuthTokenInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AuthTokenInterfaceMock) Get(name string, opts v1.GetOptions) (*v3public.AuthToken, error) {
	if mock.GetFunc == nil {
		panic("AuthTokenInterfaceMock.GetFunc: method is nil but AuthTokenInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockAuthTokenInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAuthTokenInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAuthTokenInterface.GetCalls())
func (mock *AuthTokenInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockAuthTokenInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockAuthTokenInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *AuthTokenInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3public.AuthToken, error) {
	if mock.GetNamespacedFunc == nil {
		panic("AuthTokenInterfaceMock.GetNamespacedFunc: method is nil but AuthTokenInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockAuthTokenInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockAuthTokenInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedAuthTokenInterface.GetNamespacedCalls())
func (mock *AuthTokenInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockAuthTokenInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockAuthTokenInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *AuthTokenInterfaceMock) List(opts v1.ListOptions) (*v3public.AuthTokenList, error) {
	if mock.ListFunc == nil {
		panic("AuthTokenInterfaceMock.ListFunc: method is nil but AuthTokenInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthTokenInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockAuthTokenInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedAuthTokenInterface.ListCalls())
func (mock *AuthTokenInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockAuthTokenInterfaceMockList.RLock()
	calls = mock.calls.List
	lockAuthTokenInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *AuthTokenInterfaceMock) ListNamespaced(namespace string, opts v1.ListOptions) (*v3public.AuthTokenList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("AuthTokenInterfaceMock.ListNamespacedFunc: method is nil but AuthTokenInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockAuthTokenInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockAuthTokenInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//     len(mockedAuthTokenInterface.ListNamespacedCalls())
func (mock *AuthTokenInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      v1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1.ListOptions
	}
	lockAuthTokenInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockAuthTokenInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *AuthTokenInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("AuthTokenInterfaceMock.ObjectClientFunc: method is nil but AuthTokenInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockAuthTokenInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockAuthTokenInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedAuthTokenInterface.ObjectClientCalls())
func (mock *AuthTokenInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthTokenInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockAuthTokenInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *AuthTokenInterfaceMock) Update(in1 *v3public.AuthToken) (*v3public.AuthToken, error) {
	if mock.UpdateFunc == nil {
		panic("AuthTokenInterfaceMock.UpdateFunc: method is nil but AuthTokenInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3public.AuthToken
	}{
		In1: in1,
	}
	lockAuthTokenInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockAuthTokenInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedAuthTokenInterface.UpdateCalls())
func (mock *AuthTokenInterfaceMock) UpdateCalls() []struct {
	In1 *v3public.AuthToken
} {
	var calls []struct {
		In1 *v3public.AuthToken
	}
	lockAuthTokenInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockAuthTokenInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *AuthTokenInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("AuthTokenInterfaceMock.WatchFunc: method is nil but AuthTokenInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockAuthTokenInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockAuthTokenInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedAuthTokenInterface.WatchCalls())
func (mock *AuthTokenInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockAuthTokenInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockAuthTokenInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockAuthTokensGetterMockAuthTokens sync.RWMutex
)

// Ensure, that AuthTokensGetterMock does implement AuthTokensGetter.
// If this is not the case, regenerate this file with moq.
var _ v3public.AuthTokensGetter = &AuthTokensGetterMock{}

// AuthTokensGetterMock is a mock implementation of AuthTokensGetter.
//
//     func TestSomethingThatUsesAuthTokensGetter(t *testing.T) {
//
//         // make and configure a mocked AuthTokensGetter
//         mockedAuthTokensGetter := &AuthTokensGetterMock{
//             AuthTokensFunc: func(namespace string) v3public.AuthTokenInterface {
// 	               panic("mock out the AuthTokens method")
//             },
//         }
//
//         // use mockedAuthTokensGetter in code that requires AuthTokensGetter
//         // and then make assertions.
//
//     }
type AuthTokensGetterMock struct {
	// AuthTokensFunc mocks the AuthTokens method.
	AuthTokensFunc func(namespace string) v3public.AuthTokenInterface

	// calls tracks calls to the methods.
	calls struct {
		// AuthTokens holds details about calls to the AuthTokens method.
		AuthTokens []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// AuthTokens calls AuthTokensFunc.
func (mock *AuthTokensGetterMock) AuthTokens(namespace string) v3public.AuthTokenInterface {
	if mock.AuthTokensFunc == nil {
		panic("AuthTokensGetterMock.AuthTokensFunc: method is nil but AuthTokensGetter.AuthTokens was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockAuthTokensGetterMockAuthTokens.Lock()
	mock.calls.AuthTokens = append(mock.calls.AuthTokens, callInfo)
	lockAuthTokensGetterMockAuthTokens.Unlock()
	return mock.AuthTokensFunc(namespace)
}

// AuthTokensCalls gets all the calls that were made to AuthTokens.
// Check the length with:
//     len(mockedAuthTokensGetter.AuthTokensCalls())
func (mock *AuthTokensGetterMock) AuthTokensCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockAuthTokensGetterMockAuthTokens.RLock()
	calls = mock.calls.AuthTokens
	lockAuthTokensGetterMockAuthTokens.RUnlock()
	return calls
}
